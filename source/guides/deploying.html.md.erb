---
title: Deploying Lucky
order: 10
intro: >
  There are many ways to deploy a Lucky app.
  This guide will cover the steps required to get a local Lucky app running on a free Heroku plan.
---

## Getting Started

First,
we'll need to create an account at
[Heroku](https://www.heroku.com).
Once that's done,
create a new app via the
[Heroku Dashboard](https://dashboard.heroku.com/apps).
We can give the app a unique name
or leave it blank
and Heroku will create one for us.
For this tutorial,
we'll use the name `my-lucky-app`.

## Heroku from the command line

Heroku has tools to let us manage our app from the command line.
Heroku uses git remotes to connect our local Lucky app to the remote app.
To add the proper git remote,
go to the Settings tag in the Heroku app we just created.
Find the **Heroku Git URL** line
and copy it.
Then,
add the git remote with the command line:

```bash
$ git remote add heroku
https://git.heroku.com/my-lucky-app.git
```

> Your app's URL will look different than the one above.
Make sure not to copy
and paste the whole command.

Now that we've linked up our app,
we can configure it from the command line.
A normal installation of Lucky
[requires](/guides/installing#install-required-dependencies)
that the
[Heroku CLI](https://devcenter.heroku.com/articles/heroku-cli#download-and-install)
is installed,
so we should already have the `heroku` command which we'll use below.

## Buildpacks

Most Lucky apps are built with both Crystal
and Node.js.
To enable a Node.js app on Heroku,
we'll add the
[official Node.js buildpack](https://github.com/heroku/heroku-buildpack-nodejs)
to our app:

```bash
$ heroku buildpacks:add
https://github.com/heroku/heroku-buildpack-nodejs
```

While Heroku has a buildpack for Node.js apps,
it doesn't have one for Crystal apps
(yet).
Fortunately for us,
Lucky has
[such a buildpack](https://github.com/luckyframework/heroku-buildpack-crystal)!
We'll add it so Heroku can download
and install the dependencies for Lucky:

```bash
$ heroku buildpacks:add
https://github.com/luckyframework/heroku-buildpack-crystal
```

## Adding environment variables

### `LUCKY_ENV`

Lucky needs a couple of environment variables to operate as a production app.
The first is the `LUCKY_ENV`.
We'll set it to `production`.
This will signal to Lucky that it should,
for example,
display absolute timestamps in the server log,
and use additional environment variables for its configuration:

```bash
$ heroku config:set LUCKY_ENV=production
```

### `SECRET_KEY_BASE`

Next,
we'll generate a secret key for our app.
Among other things,
this key will give us a unique value for our site's cookies.
Once we have our secret key,
we can set the `SECRET_KEY_BASE` environment variable with that key:

```bash
$ lucky gen.secret_key
******************
$ heroku config:set SECRET_KEY_BASE=******************
```

## Adding a database

Heroku offers a
[free database](https://devcenter.heroku.com/articles/heroku-postgres-plans#hobby-tier)
add-on with up to 10,000 rows.
This is almost certainly enough for most hobby projects,
at least to get started.
If we need more rows
or resources,
they offer
[upgraded plans](https://elements.heroku.com/addons/heroku-postgresql).
For this tutorial,
we're going to stick with the `hobby-dev` plan.

We'll attach the database add-on to our app:

```bash
heroku addons:create heroku-postgresql:hobby-dev
```

## Uploading the app

The last step is to upload our app's code up to Heroku.
We'll do this with the standard `git push` command
and copy our local `master` branch to Heroku's `master` branch:

```bash
$ git push heroku master
```

First,
the source code will be uploaded to Heroku.
Heroku will detect the Node.js
and Crystal components of the app,
download the appropriate dependencies,
and compile everything together.
These steps may take a few minutes to run.
Finally,
it will start Lucky
and run the app!

> Migrations will happen automatically when the app is pushed to Heroku.
Lucky makes it so you never have to worry about forgetting to migrate our app when it's deployed!

To see our deployed app,
use Heroku's `open` command:

```bash
$ heroku open
```

Happy shipping!
